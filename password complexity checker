def check_password_strength(password):
  """
  Evaluates password strength based on length and character types.

  Args:
      password: The password string to be evaluated.

  Returns:
      A tuple containing:
          - strength_score (int): An integer score representing password strength (higher is better).
          - feedback_message (str): A message describing the password's strength.
  """
  strength_score = 0
  feedback_message = ""

  # Check password length
  if len(password) >= 12:
    strength_score += 2
    feedback_message += "Length is good (12+ characters).\n"
  elif len(password) >= 8:
    strength_score += 1
    feedback_message += "Length is fair (8-11 characters).\n"
  else:
    feedback_message += "Password is too short! (less than 8 characters).\n"

  # Check for uppercase letters
  if any(char.isupper() for char in password):
    strength_score += 1
    feedback_message += "Contains uppercase letters.\n"

  # Check for lowercase letters
  if any(char.islower() for char in password):
    strength_score += 1
    feedback_message += "Contains lowercase letters.\n"

  # Check for numbers
  if any(char.isdigit() for char in password):
    strength_score += 1
    feedback_message += "Contains numbers.\n"

  # Check for special characters
  if any(char in "!@#$%^&*()-=+{};:,<.>/?\\|`~" for char in password):
    strength_score += 1
    feedback_message += "Contains special characters.\n"

  # Final strength assessment
  if strength_score >= 5:
    feedback_message += "Strong password!"
  elif strength_score >= 3:
    feedback_message += "Fair password, consider adding more complexity."
  else:
    feedback_message += "Weak password, consider making it more complex."

  return strength_score, feedback_message


# Example usage
password = input("Enter your password: ")
strength_score, feedback_message = check_password_strength(password)

print(feedback_message)
